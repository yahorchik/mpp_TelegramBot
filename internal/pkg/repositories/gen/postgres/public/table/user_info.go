//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserInfo = newUserInfoTable("public", "user_info", "")

type userInfoTable struct {
	postgres.Table

	// Columns
	UserID        postgres.ColumnString
	UserNickname  postgres.ColumnString
	UserFirstname postgres.ColumnString
	UserLastname  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserInfoTable struct {
	userInfoTable

	EXCLUDED userInfoTable
}

// AS creates new UserInfoTable with assigned alias
func (a UserInfoTable) AS(alias string) *UserInfoTable {
	return newUserInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserInfoTable with assigned schema name
func (a UserInfoTable) FromSchema(schemaName string) *UserInfoTable {
	return newUserInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserInfoTable with assigned table prefix
func (a UserInfoTable) WithPrefix(prefix string) *UserInfoTable {
	return newUserInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserInfoTable with assigned table suffix
func (a UserInfoTable) WithSuffix(suffix string) *UserInfoTable {
	return newUserInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserInfoTable(schemaName, tableName, alias string) *UserInfoTable {
	return &UserInfoTable{
		userInfoTable: newUserInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newUserInfoTableImpl("", "excluded", ""),
	}
}

func newUserInfoTableImpl(schemaName, tableName, alias string) userInfoTable {
	var (
		UserIDColumn        = postgres.StringColumn("user_id")
		UserNicknameColumn  = postgres.StringColumn("user_nickname")
		UserFirstnameColumn = postgres.StringColumn("user_firstname")
		UserLastnameColumn  = postgres.StringColumn("user_lastname")
		allColumns          = postgres.ColumnList{UserIDColumn, UserNicknameColumn, UserFirstnameColumn, UserLastnameColumn}
		mutableColumns      = postgres.ColumnList{UserNicknameColumn, UserFirstnameColumn, UserLastnameColumn}
	)

	return userInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:        UserIDColumn,
		UserNickname:  UserNicknameColumn,
		UserFirstname: UserFirstnameColumn,
		UserLastname:  UserLastnameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
