//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MessageInfo = newMessageInfoTable("public", "message_info", "")

type messageInfoTable struct {
	postgres.Table

	// Columns
	UserID      postgres.ColumnString
	MessageText postgres.ColumnString
	MessageDate postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessageInfoTable struct {
	messageInfoTable

	EXCLUDED messageInfoTable
}

// AS creates new MessageInfoTable with assigned alias
func (a MessageInfoTable) AS(alias string) *MessageInfoTable {
	return newMessageInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessageInfoTable with assigned schema name
func (a MessageInfoTable) FromSchema(schemaName string) *MessageInfoTable {
	return newMessageInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessageInfoTable with assigned table prefix
func (a MessageInfoTable) WithPrefix(prefix string) *MessageInfoTable {
	return newMessageInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessageInfoTable with assigned table suffix
func (a MessageInfoTable) WithSuffix(suffix string) *MessageInfoTable {
	return newMessageInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessageInfoTable(schemaName, tableName, alias string) *MessageInfoTable {
	return &MessageInfoTable{
		messageInfoTable: newMessageInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newMessageInfoTableImpl("", "excluded", ""),
	}
}

func newMessageInfoTableImpl(schemaName, tableName, alias string) messageInfoTable {
	var (
		UserIDColumn      = postgres.StringColumn("user_id")
		MessageTextColumn = postgres.StringColumn("message_text")
		MessageDateColumn = postgres.TimestampzColumn("message_date")
		allColumns        = postgres.ColumnList{UserIDColumn, MessageTextColumn, MessageDateColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, MessageTextColumn, MessageDateColumn}
	)

	return messageInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		MessageText: MessageTextColumn,
		MessageDate: MessageDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
